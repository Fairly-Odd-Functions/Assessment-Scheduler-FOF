{
	"info": {
		"_postman_id": "a7ce2e07-94ca-4c35-8437-eefe0e99f0c4",
		"name": "Assessment Scheduler",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33150663",
		"_collection_link": "https://fairly-odd-functions.postman.co/workspace/Assessment-Scheduler-%257C-FOF~682a4272-21b4-4ca9-b83f-c02064f29908/collection/32883617-a7ce2e07-94ca-4c35-8437-eefe0e99f0c4?action=share&source=collection_link&creator=33150663"
	},
	"item": [
		{
			"name": "Initialization",
			"item": [
				{
					"name": "Home",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`Should return \"<h1>Project 04 | Assessment Scheduler - Fairly Odd Functions</h1>\"'`, function () {\r",
									"\tpm.expect(pm.response.text()).to.contain(`<h1>Project 04 | Assessment Scheduler - Fairly Odd Functions</h1>`);\r",
									"});\r",
									"\r",
									"pm.test(\"Should have the correct status code\", function () {\r",
									"        pm.expect(pm.response.code).to.eql(200);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}",
							"host": [
								"{{host}}"
							]
						}
					},
					"response": [
						{
							"name": "Home",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}",
									"host": [
										"{{host}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Server",
									"value": "Werkzeug/3.1.3 Python/3.12.2"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Dec 2024 22:20:22 GMT"
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "65"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "<h1>Project 04 | Assessment Scheduler - Fairly Odd Functions</h1>"
						}
					]
				},
				{
					"name": "Initialize App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"if(pm.response.headers.get('Content-Type') == 'application/json'){\r",
									"\r",
									"\tconst {message} = pm.response.json();\r",
									"\r",
									"\tpm.test(\"Should return the message 'Database Initialized!'\", function () {\r",
									"\t\t\tpm.expect(message).to.eql('Database Initialized!');\r",
									"\t\t}\r",
									"\t);\r",
									"\r",
									"\tpm.test(\"Should have the correct status code\", function () {\r",
									"\t\t\r",
									"\t\tpm.expect(pm.response.code).to.eql(200);\r",
									"\t\t\r",
									"\t});\r",
									"\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/init",
							"host": [
								"{{host}}"
							],
							"path": [
								"init"
							]
						}
					},
					"response": [
						{
							"name": "Initialize App",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/init",
									"host": [
										"{{host}}"
									],
									"path": [
										"init"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Werkzeug/3.1.3 Python/3.12.2"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Dec 2024 22:20:38 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "41"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Database Initialized!\"\n}"
						}
					]
				}
			],
			"description": "Contains two (2) important requests that symbolizes the starting steps of the application to ensure it is prepared for what it is meant to accomplish."
		},
		{
			"name": "Authorization",
			"item": [
				{
					"name": "Admin Login - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"if (pm.response.headers.get('Content-Type') === 'application/json') {\r",
									"\r",
									"    pm.test(\"Returned Access Token\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.environment.set('access_token', jsonData['access_token']) \r",
									"    });\r",
									"\r",
									"    pm.test(\"Should have the correct status code\", function () {\r",
									"        pm.expect(pm.response.code).to.eql(200);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"bob.bobberson@mail.com\",\r\n\t\"password\": \"bobpass\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": [
						{
							"name": "Admin Login - Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"email\": \"bob.bobberson@mail.com\",\r\n\t\"password\": \"bobpass\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Werkzeug/3.1.3 Python/3.12.2"
								},
								{
									"key": "Date",
									"value": "Tue, 03 Dec 2024 12:41:13 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "286"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Vary",
									"value": "Cookie"
								},
								{
									"key": "Set-Cookie",
									"value": "session=.eJwlzj0OwjAMQOG7ZGbwT-zYvUwVJ45gbemEuDuVmN7yhu9T9nXk-Szb-7jyUfbXLFtJJjc2lenkXVnA6gQDB2lhhmwOqn0lhevwOjR5tDFbN6c-FbCuibbu8250JOpdvE6m5WEBK3Gs2qpADKgUTTnYMU0kQLzckOvM46_B8v0BMu8uAQ.Z078aQ.Rh6qIIIlIvIYq-DunyaSev0ryP8; HttpOnly; Path=/"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTczMzIyOTY3MywianRpIjoiNTUwZTJjNTctNjE2YS00Y2FlLTk5YTMtNWUwOTE4NjYxODlhIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6MSwibmJmIjoxNzMzMjI5NjczLCJleHAiOjE3MzM4MzQ0NzN9.IeKb8uTuc1iMuAhgk7oDYwKtox8x5GtdU3AqHwzVDdY\"\n}"
						}
					]
				},
				{
					"name": "Staff Login - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"if (pm.response.headers.get('Content-Type') === 'application/json') {\r",
									"\r",
									"    pm.test(\"Returned Access Token\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.environment.set('access_token', jsonData['access_token']) \r",
									"    });\r",
									"\r",
									"    pm.test(\"Should have the correct status code\", function () {\r",
									"        pm.expect(pm.response.code).to.eql(200);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"rick.rickson@mail.com\",\r\n\t\"password\": \"rickpass\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": [
						{
							"name": "Staff Login - Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"email\": \"rick.rickson@mail.com\",\r\n\t\"password\": \"rickpass\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Werkzeug/3.1.3 Python/3.12.2"
								},
								{
									"key": "Date",
									"value": "Tue, 03 Dec 2024 12:41:20 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "286"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Vary",
									"value": "Cookie"
								},
								{
									"key": "Set-Cookie",
									"value": "session=.eJwlzjEOwzAIQNG7eO6AwWDIZSJjsNo1aaaqd2-kTn_5w_uUfR15Psv2Pq58lP0VZStJaEoqHIY2hBi0BSgYcHfVSmogMlaim0xrU5Jmn9GHGo4QqG1F1XWfd31UxDHYWhAuc3VYWedqvTH4hIbehZyspjI7sJUbcp15_DVYvj8y8i4C.Z078cA.5bpfHUm_qmR7hDCqvLQ_ttUjp00; HttpOnly; Path=/"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTczMzIyOTY4MCwianRpIjoiOWFhNDBlOGEtYzBmMC00NWZjLWE1MmUtNzIyYWJjYWIxY2IwIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6MiwibmJmIjoxNzMzMjI5NjgwLCJleHAiOjE3MzM4MzQ0ODB9.nHpVa5rcXF8yncj95S7Y06fa_eUAbboMx9xdbxUKNEk\"\n}"
						}
					]
				},
				{
					"name": "Login - Bad Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return 'Bad Email Or Password Given'\", function () {\r",
									"    var {error} = pm.response.json();\r",
									"\tpm.expect(error).to.eql('Bad Email Or Password Given');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\r",
									"\t\"Should respond with the correct status\", \r",
									"\tfunction () {\r",
									"\t\tpm.response.to.have.status(401);\r",
									"\t}\r",
									");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"bob.bobberson@mail.com\",\r\n\t\"password\": \"bobbypass\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": [
						{
							"name": "Login - Bad Credentials",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"email\": \"bob.bobberson@mail.com\",\r\n\t\"password\": \"bobbypass\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"login"
									]
								}
							},
							"status": "UNAUTHORIZED",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Werkzeug/3.1.3 Python/3.12.2"
								},
								{
									"key": "Date",
									"value": "Tue, 03 Dec 2024 12:42:52 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "45"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": \"Bad Email Or Password Given\"\n}"
						}
					]
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const host = pm.environment.get(\"host\");\r",
									"const token = pm.environment.get(\"access_token\");\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"if (pm.response.headers.get('Content-Type') === 'application/json') {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Response has an message\", function () {\r",
									"        pm.expect(jsonData).to.have.property('message');\r",
									"    });\r",
									"\r",
									"    if (jsonData.message) {\r",
									"        pm.test(\"Should contain the correct message\", function () {\r",
									"            pm.expect(jsonData.message).to.eql(\"Logged Out Successfully\");\r",
									"        });\r",
									"    }\r",
									"\r",
									"    pm.test(\"Should have the correct status code\", function () {\r",
									"        pm.expect(pm.response.code).to.eql(200);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/logout",
							"host": [
								"{{host}}"
							],
							"path": [
								"logout"
							]
						}
					},
					"response": [
						{
							"name": "Logout",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/logout",
									"host": [
										"{{host}}"
									],
									"path": [
										"logout"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Werkzeug/3.1.3 Python/3.12.2"
								},
								{
									"key": "Date",
									"value": "Tue, 03 Dec 2024 12:41:27 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "43"
								},
								{
									"key": "Set-Cookie",
									"value": "access_token=; Expires=Thu, 01 Jan 1970 00:00:00 GMT; Secure; HttpOnly; Path=/"
								},
								{
									"key": "Set-Cookie",
									"value": "refresh_token_cookie=; Expires=Thu, 01 Jan 1970 00:00:00 GMT; Secure; HttpOnly; Path=/"
								},
								{
									"key": "Set-Cookie",
									"value": "session=; Expires=Thu, 01 Jan 1970 00:00:00 GMT; Max-Age=0; HttpOnly; Path=/"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Vary",
									"value": "Cookie"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Logged Out Successfully\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Admin",
			"item": [
				{
					"name": "Programme",
					"item": [
						{
							"name": "Add Programme",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return a successful response of Addition of a new programme\", function() {\r",
											"    pm.expect(pm.response.code).to.eql(201);\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property('message', 'Programme Created Successfully');\r",
											"\r",
											"    pm.expect(jsonData).to.have.property('Programme');\r",
											"\r",
											"    // pm.environment.set(\"programmeID\", jsonData.Programme.programmeID);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"programmeTitle\": \"B.Sc. Computer Science (General)\",\r\n    \"programmeDescription\": \"Undergraduate Degree For Computer science\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/addProgramme",
									"host": [
										"{{host}}"
									],
									"path": [
										"addProgramme"
									]
								}
							},
							"response": [
								{
									"name": "Add Programme",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"programmeTitle\": \"B.Sc. Computer Science (General)\",\r\n    \"programmeDescription\": \"Undergraduate Degree For Computer science\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/addProgramme",
											"host": [
												"{{host}}"
											],
											"path": [
												"addProgramme"
											]
										}
									},
									"status": "CREATED",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Werkzeug/3.1.3 Python/3.12.2"
										},
										{
											"key": "Date",
											"value": "Wed, 04 Dec 2024 22:21:02 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "224"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Connection",
											"value": "close"
										}
									],
									"cookie": [],
									"body": "{\n    \"Programme\": {\n        \"programmeDescription\": \"Undergraduate Degree For Computer science\",\n        \"programmeID\": 2,\n        \"programmeTitle\": \"B.Sc. Computer Science (General)\"\n    },\n    \"message\": \"Programme Created Successfully\"\n}"
								}
							]
						},
						{
							"name": "Update Programme",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Content-Type should be application/json\", function() {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"pm.test(\"Should return a message indicating the updating of the programme was successful\", function(){\r",
											"    pm.expect(pm.response.code).to.eql(201);\r",
											"    \r",
											"    var jsonData = pm.response.json();\r",
											"     pm.expect(jsonData).to.have.property('message', 'Programme Updated Successfully');\r",
											"    pm.expect(jsonData).to.have.property('Programme');\r",
											"\r",
											"    \r",
											"    \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"new_title\" : \"Bachelors of Science Computer Science Honours\",\r\n    \"new_description\" : \"Very Hard programme\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/updateProgramme/{{programmeID}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"updateProgramme",
										"{{programmeID}}"
									]
								}
							},
							"response": [
								{
									"name": "Update Programme",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"new_title\" : \"Bachelors of Science Computer Science Honours\",\r\n    \"new_description\" : \"Very Hard programme\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/updateProgramme/{{programmeID}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"updateProgramme",
												"{{programmeID}}"
											]
										}
									},
									"status": "CREATED",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Werkzeug/3.1.3 Python/3.12.2"
										},
										{
											"key": "Date",
											"value": "Wed, 04 Dec 2024 22:21:08 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "215"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Connection",
											"value": "close"
										}
									],
									"cookie": [],
									"body": "{\n    \"Programme\": {\n        \"programmeDescription\": \"Very Hard programme\",\n        \"programmeID\": 1,\n        \"programmeTitle\": \"Bachelors of Science Computer Science Honours\"\n    },\n    \"message\": \"Programme Updated Successfully\"\n}"
								}
							]
						},
						{
							"name": "List All Programmes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var schema = {\r",
											"    \"type\":\"array\",\r",
											"    \"items\":{\r",
											"        \"type\" :\"object\",\r",
											"        \"properties\":{\r",
											"            \"programmeID\":{\"type\":\"number\"},\r",
											"            \"programmeTitle\": {\"type\":\"string\"},\r",
											"            \"programmeDescription\":{\"type\":\"string\"}\r",
											"        },\r",
											"        \"required\": [\"programmeTitle\", \"programmeDescription\"]\r",
											"    }   \r",
											"}; \r",
											"pm.test(\"Content-Type should be application/json\", function() {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"pm.test(\"Should return a list of programmes\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"    \r",
											"    pm.expect(pm.response.code).to.eql(201);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/listAllProgrammes",
									"host": [
										"{{host}}"
									],
									"path": [
										"listAllProgrammes"
									]
								}
							},
							"response": [
								{
									"name": "List All Programmes",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/listAllProgrammes",
											"host": [
												"{{host}}"
											],
											"path": [
												"listAllProgrammes"
											]
										}
									},
									"status": "CREATED",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Werkzeug/3.1.3 Python/3.12.2"
										},
										{
											"key": "Date",
											"value": "Wed, 04 Dec 2024 22:21:14 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "316"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Connection",
											"value": "close"
										}
									],
									"cookie": [],
									"body": "[\n    {\n        \"programmeDescription\": \"Very Hard programme\",\n        \"programmeID\": 1,\n        \"programmeTitle\": \"Bachelors of Science Computer Science Honours\"\n    },\n    {\n        \"programmeDescription\": \"Undergraduate Degree For Computer science\",\n        \"programmeID\": 2,\n        \"programmeTitle\": \"B.Sc. Computer Science (General)\"\n    }\n]"
								}
							]
						},
						{
							"name": "Search Programme",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var schema = {\r",
											"    \"type\" :\"object\",\r",
											"        \"properties\":{\r",
											"            \"programmeID\":{\"type\":\"number\"},\r",
											"            \"programmeTitle\": {\"type\":\"string\"},\r",
											"            \"programmeDescription\":{\"type\":\"string\"}\r",
											"        },\r",
											"        \"required\": [\"programmeTitle\", \"programmeDescription\"]\r",
											"};\r",
											"pm.test(\"Content-Type should be application/json\", function() {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"pm.test(\"Should return a Programmes by its ID\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"    \r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/searchProgramme/{{programmeID}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"searchProgramme",
										"{{programmeID}}"
									]
								}
							},
							"response": [
								{
									"name": "Search Programme",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/searchProgramme/{{programmeID}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"searchProgramme",
												"{{programmeID}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Werkzeug/3.1.3 Python/3.12.2"
										},
										{
											"key": "Date",
											"value": "Wed, 04 Dec 2024 22:21:21 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "141"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Connection",
											"value": "close"
										}
									],
									"cookie": [],
									"body": "{\n    \"programmeDescription\": \"Very Hard programme\",\n    \"programmeID\": 1,\n    \"programmeTitle\": \"Bachelors of Science Computer Science Honours\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "Course",
					"item": [
						{
							"name": "Add Course - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Content-Type header is application/json\", function() {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"if (pm.response.headers.get('Content-Type') === 'application/json') {\r",
											"    if (pm.response.code === 201) {\r",
											"        pm.test(\"Should return a success message and course details\", function() {\r",
											"            var jsonData = pm.response.json();\r",
											"            pm.expect(jsonData).to.have.property('message');\r",
											"            pm.expect(jsonData).to.have.property('course');\r",
											"            pm.expect(jsonData.message).to.equal('New Course Added');\r",
											"            pm.expect(jsonData.course).to.be.an('object');\r",
											"            pm.expect(jsonData.course).to.have.property('courseCode');\r",
											"            pm.expect(jsonData.course).to.have.property('courseTitle');\r",
											"            pm.expect(jsonData.course).to.have.property('courseCredits');\r",
											"            pm.expect(jsonData.course).to.have.property('courseDescription');\r",
											"            pm.expect(jsonData.course).to.have.property('courseLevel');\r",
											"        });\r",
											"        \r",
											"        const requestBody = JSON.parse(pm.request.body.raw);\r",
											"        pm.environment.set(\"newCourseCode\", requestBody.courseCode);\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"courseCode\": \"COMP3603\", \r\n    \"courseTitle\": \"Human-Computer Interaction\", \r\n    \"courseCredits\": 5, \r\n    \"courseDescription\": \"All about humans,computers and their interactions haha.\", \r\n    \"courseLevel\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/addCourse",
									"host": [
										"{{host}}"
									],
									"path": [
										"addCourse"
									]
								}
							},
							"response": [
								{
									"name": "Add Course - Success",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n    \"courseCode\": \"COMP3603\", \r\n    \"courseTitle\": \"Human-Computer Interaction\", \r\n    \"courseCredits\": 5, \r\n    \"courseDescription\": \"All about humans,computers and their interactions haha.\", \r\n    \"courseLevel\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/addCourse",
											"host": [
												"{{host}}"
											],
											"path": [
												"addCourse"
											]
										}
									},
									"status": "CREATED",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Werkzeug/3.1.3 Python/3.12.2"
										},
										{
											"key": "Date",
											"value": "Wed, 04 Dec 2024 22:21:28 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "263"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Connection",
											"value": "close"
										}
									],
									"cookie": [],
									"body": "{\n    \"course\": {\n        \"courseCode\": \"COMP3603\",\n        \"courseCredits\": 5,\n        \"courseDescription\": \"All about humans,computers and their interactions haha.\",\n        \"courseLevel\": 1,\n        \"courseTitle\": \"Human-Computer Interaction\"\n    },\n    \"message\": \"New Course Added\"\n}"
								}
							]
						},
						{
							"name": "Update Course - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Content-Type header is application/json\", function() {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"if (pm.response.headers.get('Content-Type') === 'application/json') {\r",
											"\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.test(\"Should return a successful status code\", function() {\r",
											"        pm.expect(pm.response.code).to.eql(200);\r",
											"    });\r",
											"\r",
											"    if (pm.response.code === 200) {\r",
											"        pm.test(\"Response contains a success message and updated course details\", function() {\r",
											"            pm.expect(jsonData).to.have.property('message');\r",
											"            pm.expect(jsonData.message).to.match(/Course: .* - .* Updated Successfully!/);\r",
											"            pm.expect(jsonData).to.have.property('course');\r",
											"            pm.expect(jsonData.course).to.be.an('object');\r",
											"            pm.expect(jsonData.course).to.have.property('courseCode');\r",
											"            pm.expect(jsonData.course).to.have.property('courseTitle');\r",
											"            pm.expect(jsonData.course).to.have.property('courseCredits');\r",
											"            pm.expect(jsonData.course).to.have.property('courseDescription');\r",
											"            pm.expect(jsonData.course).to.have.property('courseLevel');\r",
											"        });\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"courseTitle\": \"Human-Computer Interaction\", \r\n    \"courseCredits\": 3, \r\n    \"courseDescription\": \"All about humans,computers and their interactions haha.\", \r\n    \"courseLevel\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/updateCourse/{{courseCode}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"updateCourse",
										"{{courseCode}}"
									]
								}
							},
							"response": [
								{
									"name": "Update Course - Success",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n    \"courseTitle\": \"Human-Computer Interaction\", \r\n    \"courseCredits\": 3, \r\n    \"courseDescription\": \"All about humans,computers and their interactions haha.\", \r\n    \"courseLevel\": 3\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/updateCourse/{{courseCode}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"updateCourse",
												"{{courseCode}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Werkzeug/3.1.3 Python/3.12.2"
										},
										{
											"key": "Date",
											"value": "Wed, 04 Dec 2024 22:21:33 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "314"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Connection",
											"value": "close"
										}
									],
									"cookie": [],
									"body": "{\n    \"course\": {\n        \"courseCode\": \"COMP3613\",\n        \"courseCredits\": 3,\n        \"courseDescription\": \"All about humans,computers and their interactions haha.\",\n        \"courseLevel\": 3,\n        \"courseTitle\": \"Human-Computer Interaction\"\n    },\n    \"message\": \"Course: COMP3613 - Human-Computer Interaction Updated Successfully!\"\n}"
								}
							]
						},
						{
							"name": "Search Course - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Content-Type header is application/json\", function() {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"if (pm.response.headers.get('Content-Type') === 'application/json') {\r",
											"\r",
											"    pm.test(\"Should return a successful status code\", function() {\r",
											"        pm.expect(pm.response.code).to.eql(200);\r",
											"    });\r",
											"\r",
											"    if (pm.response.code === 200) {\r",
											"        pm.test(\"Response contains course details\", function() {\r",
											"            var jsonData = pm.response.json();\r",
											"            pm.expect(jsonData).to.have.property('courseCode');\r",
											"            pm.expect(jsonData).to.have.property('courseTitle');\r",
											"            pm.expect(jsonData).to.have.property('courseCredits');\r",
											"            pm.expect(jsonData).to.have.property('courseDescription');\r",
											"            pm.expect(jsonData).to.have.property('courseLevel');\r",
											"        });\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/searchCourse/{{courseCode}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"searchCourse",
										"{{courseCode}}"
									]
								}
							},
							"response": [
								{
									"name": "Search Course - Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/searchCourse/{{courseCode}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"searchCourse",
												"{{courseCode}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Werkzeug/3.1.3 Python/3.12.2"
										},
										{
											"key": "Date",
											"value": "Wed, 04 Dec 2024 22:21:38 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "202"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Connection",
											"value": "close"
										}
									],
									"cookie": [],
									"body": "{\n    \"courseCode\": \"COMP3613\",\n    \"courseCredits\": 3,\n    \"courseDescription\": \"All about humans,computers and their interactions haha.\",\n    \"courseLevel\": 3,\n    \"courseTitle\": \"Human-Computer Interaction\"\n}"
								}
							]
						},
						{
							"name": "List All Courses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Content-Type header is application/json\", function() {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"if (pm.response.headers.get('Content-Type') === 'application/json') {\r",
											"\r",
											"    pm.test(\"Should return a successful status code\", function() {\r",
											"        pm.expect(pm.response.code).to.eql(200);\r",
											"    });\r",
											"\r",
											"    if (pm.response.code === 200) {\r",
											"        pm.test(\"Response contains list of courses\", function() {\r",
											"            var jsonData = pm.response.json();\r",
											"            pm.expect(jsonData).to.be.an('array');\r",
											"            pm.expect(jsonData.length).to.be.greaterThan(0);\r",
											"        });\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/listCourses",
									"host": [
										"{{host}}"
									],
									"path": [
										"listCourses"
									]
								}
							},
							"response": [
								{
									"name": "List All Courses",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/listCourses",
											"host": [
												"{{host}}"
											],
											"path": [
												"listCourses"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Werkzeug/3.1.3 Python/3.12.2"
										},
										{
											"key": "Date",
											"value": "Wed, 04 Dec 2024 22:22:09 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "437"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Connection",
											"value": "close"
										}
									],
									"cookie": [],
									"body": "[\n    {\n        \"courseCode\": \"COMP3613\",\n        \"courseCredits\": 3,\n        \"courseDescription\": \"All about humans,computers and their interactions haha.\",\n        \"courseLevel\": 3,\n        \"courseTitle\": \"Human-Computer Interaction\"\n    },\n    {\n        \"courseCode\": \"COMP3603\",\n        \"courseCredits\": 5,\n        \"courseDescription\": \"All about humans,computers and their interactions haha.\",\n        \"courseLevel\": 1,\n        \"courseTitle\": \"Human-Computer Interaction\"\n    }\n]"
								}
							]
						},
						{
							"name": "Get Course Programme",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"courseProgrammeID\": { \"type\": \"number\" },\r",
											"        \"programmeID\": { \"type\": \"number\" },\r",
											"        \"courseCode\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"programmeID\", \"courseCode\"]\r",
											"};\r",
											"\r",
											"pm.test(\"Should return a successful response of requesting a course for a programme\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type should be application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/getCourseProgramme/{{courseCode}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"getCourseProgramme",
										"{{courseCode}}"
									]
								}
							},
							"response": [
								{
									"name": "Get Course Programme",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/getCourseProgramme/{{courseCode}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"getCourseProgramme",
												"{{courseCode}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Werkzeug/3.1.3 Python/3.12.2"
										},
										{
											"key": "Date",
											"value": "Wed, 04 Dec 2024 22:22:16 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "77"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Connection",
											"value": "close"
										}
									],
									"cookie": [],
									"body": "{\n    \"courseCode\": \"COMP3613\",\n    \"courseProgrammeID\": 1,\n    \"programmeID\": 1\n}"
								}
							]
						}
					]
				},
				{
					"name": "ProgrammeCourse",
					"item": [
						{
							"name": "Add Course To Programme",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return a successful response of Addition with the message\", function(){\r",
											"    pm.expect(pm.response.code).to.eql(201);\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('message', 'Course successfully added to the programme');\r",
											"    pm.expect(jsonData).to.have.property('CourseProgramme');\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type should be application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"courseCode\": \"{{newCourseCode}}\",\r\n    \"programmeID\": \"{{programmeID}}\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/addProgrammeCourse",
									"host": [
										"{{host}}"
									],
									"path": [
										"addProgrammeCourse"
									]
								}
							},
							"response": [
								{
									"name": "Add Course To Programme",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"courseCode\": \"{{newCourseCode}}\",\r\n    \"programmeID\": \"{{programmeID}}\"\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/addProgrammeCourse",
											"host": [
												"{{host}}"
											],
											"path": [
												"addProgrammeCourse"
											]
										}
									},
									"status": "CREATED",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Werkzeug/3.1.3 Python/3.12.2"
										},
										{
											"key": "Date",
											"value": "Wed, 04 Dec 2024 22:22:23 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "169"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Connection",
											"value": "close"
										}
									],
									"cookie": [],
									"body": "{\n    \"CourseProgramme\": {\n        \"courseCode\": \"COMP3603\",\n        \"courseProgrammeID\": 2,\n        \"programmeID\": 1\n    },\n    \"message\": \"Course successfully added to the programme\"\n}"
								}
							]
						},
						{
							"name": "List Programme Courses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"CourseProgrammes\": {\r",
											"            \"type\": \"array\",\r",
											"            \"items\": {\r",
											"                \"type\": \"object\",\r",
											"                \"properties\": {\r",
											"                    \"courseProgrammeID\": { \"type\": \"number\" },\r",
											"                    \"programmeID\": { \"type\": \"number\" },\r",
											"                    \"courseCode\": { \"type\": \"string\" }\r",
											"                },\r",
											"                \"required\": [\"programmeID\", \"courseCode\"]\r",
											"            }\r",
											"        }\r",
											"    },\r",
											"    \"required\": [\"CourseProgrammes\"]\r",
											"};\r",
											"\r",
											"pm.test(\"Should return a list of Programme Courses\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type should be application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/listProgrammeCourses/{{programmeID}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"listProgrammeCourses",
										"{{programmeID}}"
									]
								}
							},
							"response": [
								{
									"name": "List Programme Courses",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/listProgrammeCourses/{{programmeID}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"listProgrammeCourses",
												"{{programmeID}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Werkzeug/3.1.3 Python/3.12.2"
										},
										{
											"key": "Date",
											"value": "Wed, 04 Dec 2024 22:22:29 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "227"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Connection",
											"value": "close"
										}
									],
									"cookie": [],
									"body": "{\n    \"CourseProgrammes\": [\n        {\n            \"courseCode\": \"COMP3613\",\n            \"courseProgrammeID\": 1,\n            \"programmeID\": 1\n        },\n        {\n            \"courseCode\": \"COMP3603\",\n            \"courseProgrammeID\": 2,\n            \"programmeID\": 1\n        }\n    ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "Semester",
					"item": [
						{
							"name": "Add Semester",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Content-Type should be application/json\", function() {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Should return a successful addition of a new semester\", function(){\r",
											"    pm.expect(pm.response.code).to.eql(201);\r",
											"    \r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('New Semester Added');\r",
											"    pm.expect(jsonData['New Semester Added']).to.have.property('semesterID');\r",
											"\r",
											"    var semesterID = jsonData['New Semester Added'].semesterID;\r",
											"    pm.environment.set(\"newSemesterID\", semesterID);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"semesterName\" : \"Semester 4\",\r\n    \"academicYear\" : \"2024/2025\",\r\n    \"startDate\" : \"2025-01-19\",\r\n    \"endDate\" : \"2025-05-09\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/addSemester",
									"host": [
										"{{host}}"
									],
									"path": [
										"addSemester"
									]
								}
							},
							"response": [
								{
									"name": "Add Semester",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"semesterName\" : \"Semester 4\",\r\n    \"academicYear\" : \"2024/2025\",\r\n    \"startDate\" : \"2025-01-19\",\r\n    \"endDate\" : \"2025-05-09\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/addSemester",
											"host": [
												"{{host}}"
											],
											"path": [
												"addSemester"
											]
										}
									},
									"status": "CREATED",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Werkzeug/3.1.3 Python/3.12.2"
										},
										{
											"key": "Date",
											"value": "Wed, 04 Dec 2024 22:22:36 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "88"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Connection",
											"value": "close"
										}
									],
									"cookie": [],
									"body": "{\n    \"New Semester Added\": {\n        \"semesterID\": 2,\n        \"semesterName\": \"Semester 4\"\n    }\n}"
								}
							]
						},
						{
							"name": "Update Semester",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Content-Type should be application/json\", function() {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Should return a successful update of semester\", function(){\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"    \r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('Semester Updated');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"new_semesterName\" : \"Semester 2\",\r\n    \"new_academicYear\" : \"2024/2025\",\r\n    \"startDate\" : \"2025-01-19\",\r\n    \"endDate\" : \"2025-05-09\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/updateSemester/{{newSemesterID}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"updateSemester",
										"{{newSemesterID}}"
									]
								}
							},
							"response": [
								{
									"name": "Update Semester",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"new_semesterName\" : \"Semester 2\",\r\n    \"new_academicYear\" : \"2024/2025\",\r\n    \"startDate\" : \"2025-01-19\",\r\n    \"endDate\" : \"2025-05-09\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/updateSemester/{{newSemesterID}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"updateSemester",
												"{{newSemesterID}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Werkzeug/3.1.3 Python/3.12.2"
										},
										{
											"key": "Date",
											"value": "Wed, 04 Dec 2024 22:22:43 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "217"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Connection",
											"value": "close"
										}
									],
									"cookie": [],
									"body": "{\n    \"Semester Updated\": {\n        \"academicYear\": \"2024/2025\",\n        \"endDate\": \"Fri, 09 May 2025 00:00:00 GMT\",\n        \"semesterID\": 2,\n        \"semesterName\": \"Semester 2\",\n        \"startDate\": \"Sun, 19 Jan 2025 00:00:00 GMT\"\n    }\n}"
								}
							]
						},
						{
							"name": "Search Semester",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Content-Type should be application/json\", function() {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Should return a successful response with status 200\", function() {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return the correct semester details\", function() {\r",
											"    var responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.have.property('semesterID');\r",
											"    pm.expect(responseJson).to.have.property('semesterName');\r",
											"    pm.expect(responseJson).to.have.property('academicYear');\r",
											"    pm.expect(responseJson).to.have.property('startDate');\r",
											"    pm.expect(responseJson).to.have.property('endDate');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/searchSemester/{{newSemesterID}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"searchSemester",
										"{{newSemesterID}}"
									]
								}
							},
							"response": [
								{
									"name": "Search Semester",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/searchSemester/{{newSemesterID}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"searchSemester",
												"{{newSemesterID}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Werkzeug/3.1.3 Python/3.12.2"
										},
										{
											"key": "Date",
											"value": "Wed, 04 Dec 2024 22:22:49 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "179"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Connection",
											"value": "close"
										}
									],
									"cookie": [],
									"body": "{\n    \"academicYear\": \"2024/2025\",\n    \"endDate\": \"Fri, 09 May 2025 00:00:00 GMT\",\n    \"semesterID\": 2,\n    \"semesterName\": \"Semester 2\",\n    \"startDate\": \"Sun, 19 Jan 2025 00:00:00 GMT\"\n}"
								}
							]
						},
						{
							"name": "List Semesters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var schema = {\r",
											"    \"type\": \"array\",\r",
											"    \"items\": {\r",
											"        \"type\": \"object\",\r",
											"        \"properties\": {\r",
											"            \"semesterID\": { \"type\": \"number\" },\r",
											"            \"semesterName\": { \"type\": \"string\" },\r",
											"            \"academicYear\": { \"type\": \"string\" },\r",
											"            \"startDate\": { \"type\": \"string\", \"format\": \"date\" },  // Date format (YYYY-MM-DD)\r",
											"            \"endDate\": { \"type\": \"string\", \"format\": \"date\" }     // Date format (YYYY-MM-DD)\r",
											"        },\r",
											"        \"required\": [\"semesterID\", \"semesterName\", \"academicYear\", \"startDate\", \"endDate\"]\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.test(\"Content-Type should be application/json\", function() {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Should return a list of semesters\", function() {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/listSemesters",
									"host": [
										"{{host}}"
									],
									"path": [
										"listSemesters"
									]
								}
							},
							"response": [
								{
									"name": "List Semesters",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/listSemesters",
											"host": [
												"{{host}}"
											],
											"path": [
												"listSemesters"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Werkzeug/3.1.3 Python/3.12.2"
										},
										{
											"key": "Date",
											"value": "Wed, 04 Dec 2024 22:22:56 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "440"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Connection",
											"value": "close"
										}
									],
									"cookie": [],
									"body": "{\n    \"Semesters\": [\n        {\n            \"academicYear\": \"2024/2025\",\n            \"endDate\": \"Fri, 20 Dec 2024 00:00:00 GMT\",\n            \"semesterID\": 1,\n            \"semesterName\": \"Semester 1\",\n            \"startDate\": \"Sun, 25 Aug 2024 00:00:00 GMT\"\n        },\n        {\n            \"academicYear\": \"2024/2025\",\n            \"endDate\": \"Fri, 09 May 2025 00:00:00 GMT\",\n            \"semesterID\": 2,\n            \"semesterName\": \"Semester 2\",\n            \"startDate\": \"Sun, 19 Jan 2025 00:00:00 GMT\"\n        }\n    ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "CourseOffering",
					"item": [
						{
							"name": "Add Course Offering - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Content-Type header is application/json\", function() {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"if (pm.response.headers.get('Content-Type') === 'application/json') {\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.test(\"Should return a successful status code\", function() {\r",
											"        pm.expect(pm.response.code).to.eql(201);\r",
											"    });\r",
											"\r",
											"    if (pm.response.code === 201) {\r",
											"        pm.test(\"Response contains success message with course offering details\", function() {\r",
											"            pm.expect(jsonData).to.have.property('message');\r",
											"            pm.expect(jsonData.message).to.match(/Course: .* for Semester ID \\d+ With \\d+ Students Was Added Successfully!/);\r",
											"        });\r",
											"\r",
											"        if (jsonData.hasOwnProperty('courseOfferingID')) {\r",
											"            pm.environment.set(\"courseOfferingID\", jsonData.courseOfferingID);\r",
											"        } else {\r",
											"            pm.test(\"courseOfferingID is missing in the response\", function() {\r",
											"                pm.expect(jsonData).to.have.property('courseOfferingID');\r",
											"            });\r",
											"        }\r",
											"    }\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"semesterID\": \"{{semesterID}}\",\r\n    \"totalStudentsEnrolled\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/addCourseOffering/{{newCourseCode}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"addCourseOffering",
										"{{newCourseCode}}"
									]
								}
							},
							"response": [
								{
									"name": "Add Course Offering - Success",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"semesterID\": \"{{semesterID}}\",\r\n    \"totalStudentsEnrolled\": 100\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/addCourseOffering/{{newCourseCode}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"addCourseOffering",
												"{{newCourseCode}}"
											]
										}
									},
									"status": "CREATED",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Werkzeug/3.1.3 Python/3.12.2"
										},
										{
											"key": "Date",
											"value": "Wed, 04 Dec 2024 22:23:10 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "121"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Connection",
											"value": "close"
										}
									],
									"cookie": [],
									"body": "{\n    \"courseOfferingID\": 2,\n    \"message\": \"Course: COMP3603 for Semester ID 1 With 100 Students Was Added Successfully!\"\n}"
								}
							]
						},
						{
							"name": "List All Offerings - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Content-Type header is application/json\", function() {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"if (pm.response.headers.get('Content-Type') === 'application/json') {\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.test(\"Should return a successful status code\", function() {\r",
											"        pm.expect(pm.response.code).to.eql(200);\r",
											"    });\r",
											"\r",
											"    if (pm.response.code === 200) {\r",
											"        pm.test(\"Response contains course offerings data\", function() {\r",
											"            pm.expect(jsonData).to.have.property('CourseOfferings');\r",
											"            pm.expect(jsonData.CourseOfferings).to.be.an('array').that.is.not.empty;\r",
											"        });\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/listAllOfferings",
									"host": [
										"{{host}}"
									],
									"path": [
										"listAllOfferings"
									]
								}
							},
							"response": [
								{
									"name": "List All Offerings - Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/listAllOfferings",
											"host": [
												"{{host}}"
											],
											"path": [
												"listAllOfferings"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Werkzeug/3.1.3 Python/3.12.2"
										},
										{
											"key": "Date",
											"value": "Wed, 04 Dec 2024 22:23:16 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "750"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Connection",
											"value": "close"
										}
									],
									"cookie": [],
									"body": "{\n    \"CourseOfferings\": [\n        {\n            \"courseCode\": \"COMP3613\",\n            \"offeringID\": 1,\n            \"semester\": {\n                \"academicYear\": \"2024/2025\",\n                \"endDate\": \"Fri, 20 Dec 2024 00:00:00 GMT\",\n                \"semesterID\": 1,\n                \"semesterName\": \"Semester 1\",\n                \"startDate\": \"Sun, 25 Aug 2024 00:00:00 GMT\"\n            },\n            \"semesterID\": 1,\n            \"totalStudentsEnrolled\": 125\n        },\n        {\n            \"courseCode\": \"COMP3603\",\n            \"offeringID\": 2,\n            \"semester\": {\n                \"academicYear\": \"2024/2025\",\n                \"endDate\": \"Fri, 20 Dec 2024 00:00:00 GMT\",\n                \"semesterID\": 1,\n                \"semesterName\": \"Semester 1\",\n                \"startDate\": \"Sun, 25 Aug 2024 00:00:00 GMT\"\n            },\n            \"semesterID\": 1,\n            \"totalStudentsEnrolled\": 100\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "List Semester Courses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var schema = {\r",
											"    \"type\": \"array\",\r",
											"    \"items\": {\r",
											"        \"type\": \"object\",\r",
											"        \"properties\": {\r",
											"            \"offeringID\": { \"type\": \"number\" },\r",
											"            \"courseCode\": { \"type\": \"string\" },\r",
											"            \"semesterID\": { \"type\": \"number\" },\r",
											"            \"semester\": {\r",
											"                \"type\": \"object\",\r",
											"                \"properties\": {\r",
											"                    \"semesterID\": { \"type\": \"number\" },\r",
											"                    \"semesterName\": { \"type\": \"string\" },\r",
											"                    \"academicYear\": { \"type\": \"string\" },\r",
											"                    \"startDate\": { \"type\": \"string\", \"format\": \"date-time\" },\r",
											"                    \"endDate\": { \"type\": \"string\", \"format\": \"date-time\" }\r",
											"                },\r",
											"                \"required\": [\"semesterID\", \"semesterName\", \"academicYear\", \"startDate\", \"endDate\"]\r",
											"            },\r",
											"            \"totalStudentsEnrolled\": { \"type\": \"number\" }\r",
											"        },\r",
											"        \"required\": [\"semesterID\", \"courseCode\", \"totalStudentsEnrolled\", \"semester\"]\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.test(\"Content-Type should be application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Should return a list of semester courses\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/listSemesterCourses/{{semesterID}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"listSemesterCourses",
										"{{semesterID}}"
									]
								}
							},
							"response": [
								{
									"name": "List Semester Courses",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/listSemesterCourses/{{semesterID}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"listSemesterCourses",
												"{{semesterID}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Werkzeug/3.1.3 Python/3.12.2"
										},
										{
											"key": "Date",
											"value": "Wed, 04 Dec 2024 22:23:22 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "671"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Connection",
											"value": "close"
										}
									],
									"cookie": [],
									"body": "[\n    {\n        \"courseCode\": \"COMP3613\",\n        \"offeringID\": 1,\n        \"semester\": {\n            \"academicYear\": \"2024/2025\",\n            \"endDate\": \"Fri, 20 Dec 2024 00:00:00 GMT\",\n            \"semesterID\": 1,\n            \"semesterName\": \"Semester 1\",\n            \"startDate\": \"Sun, 25 Aug 2024 00:00:00 GMT\"\n        },\n        \"semesterID\": 1,\n        \"totalStudentsEnrolled\": 125\n    },\n    {\n        \"courseCode\": \"COMP3603\",\n        \"offeringID\": 2,\n        \"semester\": {\n            \"academicYear\": \"2024/2025\",\n            \"endDate\": \"Fri, 20 Dec 2024 00:00:00 GMT\",\n            \"semesterID\": 1,\n            \"semesterName\": \"Semester 1\",\n            \"startDate\": \"Sun, 25 Aug 2024 00:00:00 GMT\"\n        },\n        \"semesterID\": 1,\n        \"totalStudentsEnrolled\": 100\n    }\n]"
								}
							]
						}
					]
				},
				{
					"name": "CourseStaff",
					"item": [
						{
							"name": "Add Course Staff - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return a successful response when staff is added to the course\", function() {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('Message', 'Staff successfully assigned to the course');\r",
											"    pm.expect(jsonData).to.have.property('CourseStaff');\r",
											"    pm.expect(jsonData.CourseStaff).to.have.property('courseStaffID');\r",
											"    pm.expect(jsonData.CourseStaff).to.have.property('courseOffering');\r",
											"    pm.expect(jsonData.CourseStaff).to.have.property('staff');\r",
											"    pm.expect(pm.response.code).to.eql(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function() {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"staffEmail\": \"{{staffEmail}}\",\r\n    \"semesterName\": \"Semester 1\",\r\n    \"academicYear\": \"2024/2025\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/addCourseStaff/{{newCourseCode}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"addCourseStaff",
										"{{newCourseCode}}"
									]
								}
							},
							"response": [
								{
									"name": "Add Course Staff - Success",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"staffEmail\": \"{{staffEmail}}\",\r\n    \"semesterName\": \"Semester 1\",\r\n    \"academicYear\": \"2024/2025\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/addCourseStaff/{{newCourseCode}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"addCourseStaff",
												"{{newCourseCode}}"
											]
										}
									},
									"status": "CREATED",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Werkzeug/3.1.3 Python/3.12.2"
										},
										{
											"key": "Date",
											"value": "Wed, 04 Dec 2024 22:23:30 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "511"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Connection",
											"value": "close"
										}
									],
									"cookie": [],
									"body": "{\n    \"CourseStaff\": {\n        \"courseOffering\": {\n            \"academicYear\": \"2024/2025\",\n            \"courseCode\": \"COMP3603\",\n            \"courseTitle\": \"Human-Computer Interaction\",\n            \"endDate\": \"Fri, 20 Dec 2024 00:00:00 GMT\",\n            \"semester\": \"Semester 1\",\n            \"startDate\": \"Sun, 25 Aug 2024 00:00:00 GMT\"\n        },\n        \"courseStaffID\": 1,\n        \"staff\": {\n            \"staffEmail\": \"rick.rickson@mail.com\",\n            \"staffID\": 2,\n            \"staffName\": \"Rick Rickson\"\n        }\n    },\n    \"Message\": \"Staff successfully assigned to the course\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "Register New Staff - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"if (pm.response.headers.get('Content-Type') === 'application/json') {\r",
									"\r",
									"    if (pm.response.code === 201) {\r",
									"        pm.test(\"Should return staff data\", function() {\r",
									"            var jsonData = pm.response.json();\r",
									"            pm.expect(jsonData).to.have.property('email');\r",
									"            pm.expect(jsonData).to.have.property('first_name');\r",
									"            pm.expect(jsonData).to.have.property('last_name');\r",
									"\r",
									"            if (jsonData.email) {\r",
									"                pm.environment.set(\"newStaffEmail\", jsonData.email);\r",
									"            }\r",
									"        });\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Johnny\", \r\n    \"lastName\": \"Pearsauce\",\r\n    \"email\": \"johnny.applesauce@mail.com\",\r\n    \"password\": \"johnnypass\" \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/registerStaff",
							"host": [
								"{{host}}"
							],
							"path": [
								"registerStaff"
							]
						}
					},
					"response": [
						{
							"name": "Register New Staff - Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"Johnny\", \r\n    \"lastName\": \"Pearsauce\",\r\n    \"email\": \"johnny.applesauce@mail.com\",\r\n    \"password\": \"johnnypass\" \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/registerStaff",
									"host": [
										"{{host}}"
									],
									"path": [
										"registerStaff"
									]
								}
							},
							"status": "CREATED",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Werkzeug/3.1.3 Python/3.12.2"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Dec 2024 22:23:39 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "98"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"email\": \"johnny.applesauce@mail.com\",\n    \"first_name\": \"Johnny\",\n    \"last_name\": \"Pearsauce\"\n}"
						}
					]
				},
				{
					"name": "Create Admin - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"if (pm.response.headers.get('Content-Type') === 'application/json') {\r",
									"\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Should have the correct status code\", () => {\r",
									"        pm.expect(pm.response.code).to.eql(201);  // Check for 201 status code\r",
									"    });\r",
									"\r",
									"    if (pm.response.code === 201) {\r",
									"        pm.test(\"Should return a successful response with the admin data\", () => {\r",
									"            pm.expect(jsonData).to.have.property('message', 'Admin Created Successfully!');\r",
									"            pm.expect(jsonData).to.have.property('admin');\r",
									"            \r",
									"            const adminData = jsonData.admin;\r",
									"\r",
									"            pm.expect(adminData).to.have.property('email');\r",
									"            pm.expect(adminData).to.have.property('firstName');\r",
									"            pm.expect(adminData).to.have.property('lastName');\r",
									"            \r",
									"            if (adminData.email) {\r",
									"                pm.environment.set(\"newAdminEmail\", adminData.email);\r",
									"            }\r",
									"        });\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Bubble\", \r\n    \"lastName\": \"Bub\",\r\n    \"email\": \"bibble.bub@mail.com\",\r\n    \"password\": \"bubblepass\" \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/createAdmin",
							"host": [
								"{{host}}"
							],
							"path": [
								"createAdmin"
							]
						}
					},
					"response": [
						{
							"name": "Create Admin - Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"Bubble\", \r\n    \"lastName\": \"Bub\",\r\n    \"email\": \"bibble.bub@mail.com\",\r\n    \"password\": \"bubblepass\" \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/createAdmin",
									"host": [
										"{{host}}"
									],
									"path": [
										"createAdmin"
									]
								}
							},
							"status": "CREATED",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Werkzeug/3.1.3 Python/3.12.2"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Dec 2024 22:23:45 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "150"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"admin\": {\n        \"email\": \"bibble.bub@mail.com\",\n        \"firstName\": \"Bubble\",\n        \"lastName\": \"Bub\"\n    },\n    \"message\": \"Admin Created Successfully!\"\n}"
						}
					]
				},
				{
					"name": "Update Staff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"if (pm.response.headers.get('Content-Type') === 'application/json') {\r",
									"\r",
									"    if (pm.response.code === 200) {\r",
									"        pm.test(\"Should return a success message\",\r",
									"            function() {\r",
									"                var jsonData = pm.response.json();\r",
									"                pm.expect(jsonData).to.have.property('message');\r",
									"                pm.expect(jsonData.message).to.equal('Staff Member Updated Successfully!');\r",
									"            }\r",
									"        );\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"\", \r\n    \"lastName\": \"Applesauce\",\r\n    \"email\": \"\",\r\n    \"password\": \"\" \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/updateStaff/{{newStaffEmail}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"updateStaff",
								"{{newStaffEmail}}"
							]
						}
					},
					"response": [
						{
							"name": "Update Staff",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"\", \r\n    \"lastName\": \"Applesauce\",\r\n    \"email\": \"\",\r\n    \"password\": \"\" \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/updateStaff/{{newStaffEmail}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"updateStaff",
										"{{newStaffEmail}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Werkzeug/3.1.3 Python/3.12.2"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Dec 2024 22:24:26 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "173"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Staff Member Updated Successfully!\",\n    \"staff\": {\n        \"email\": \"johnny.applesauce@mail.com\",\n        \"first_name\": \"Johnny\",\n        \"last_name\": \"Applesauce\"\n    }\n}"
						}
					]
				},
				{
					"name": "Update Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"if (pm.response.headers.get('Content-Type') === 'application/json') {\r",
									"\r",
									"    if (pm.response.code === 200) {\r",
									"        pm.test(\"Should return a success message\",\r",
									"            function() {\r",
									"                var jsonData = pm.response.json();\r",
									"                pm.expect(jsonData).to.have.property('message');\r",
									"                pm.expect(jsonData.message).to.equal('Admin Member Updated Successfully!');\r",
									"            }\r",
									"        );\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"\", \r\n    \"lastName\": \"\",\r\n    \"email\": \"bubble.bub@mail.com\",\r\n    \"password\": \"\" \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/updateAdmin/{{newAdminEmail}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"updateAdmin",
								"{{newAdminEmail}}"
							]
						}
					},
					"response": [
						{
							"name": "Update Admin",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"\", \r\n    \"lastName\": \"\",\r\n    \"email\": \"bubble.bub@mail.com\",\r\n    \"password\": \"\" \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/updateAdmin/{{newAdminEmail}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"updateAdmin",
										"{{newAdminEmail}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Werkzeug/3.1.3 Python/3.12.2"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Dec 2024 22:24:34 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "157"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"admin\": {\n        \"email\": \"bubble.bub@mail.com\",\n        \"firstName\": \"Bubble\",\n        \"lastName\": \"Bub\"\n    },\n    \"message\": \"Admin Member Updated Successfully!\"\n}"
						}
					]
				},
				{
					"name": "Get All Staff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"if (pm.response.headers.get('Content-Type') === 'application/json') {\r",
									"    pm.test(\"Response status code is 200\", function() {\r",
									"        pm.expect(pm.response.code).to.eql(200);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/allStaff",
							"host": [
								"{{host}}"
							],
							"path": [
								"allStaff"
							]
						}
					},
					"response": [
						{
							"name": "Get All Staff",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/allStaff",
									"host": [
										"{{host}}"
									],
									"path": [
										"allStaff"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Werkzeug/3.1.3 Python/3.12.2"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Dec 2024 22:24:41 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "211"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"email\": \"rick.rickson@mail.com\",\n        \"firstName\": \"Rick\",\n        \"lastName\": \"Rickson\"\n    },\n    {\n        \"email\": \"johnny.applesauce@mail.com\",\n        \"first_name\": \"Johnny\",\n        \"last_name\": \"Applesauce\"\n    }\n]"
						}
					]
				},
				{
					"name": "Get All Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"  \"type\": \"array\",\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"firstName\": { \"type\": \"string\" },\r",
									"      \"lastName\": { \"type\": \"string\" },\r",
									"      \"email\": { \"type\": \"string\" }\r",
									"    },\r",
									"    \"required\": [\"firstName\", \"lastName\", \"email\"]\r",
									"  }\r",
									"};\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"if (pm.response.headers.get('Content-Type') === 'application/json') {\r",
									"\r",
									"    if (pm.response.code === 200) {\r",
									"        pm.test(\"Admin data should have the attributes firstName, lastName, and email with the appropriate values\",\r",
									"            function() {\r",
									"                var jsonData = pm.response.json();\r",
									"                pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"            }\r",
									"        );\r",
									"    }\r",
									"\r",
									"    if (pm.response.code === 404) {\r",
									"        pm.test(\"Error code 404 should be returned when no admin found\",\r",
									"            function() {\r",
									"                pm.expect(pm.response.json()).to.have.property(\"error\");\r",
									"            }\r",
									"        );\r",
									"    }\r",
									"\r",
									"    if (pm.response.code === 500) {\r",
									"        pm.test(\"Error code 500 should be returned when an unknown error occurs\",\r",
									"            function() {\r",
									"                pm.expect(pm.response.json()).to.have.property(\"error\");\r",
									"                pm.expect(pm.response.json().error).to.equal(\"An unknown error occurred\");\r",
									"            }\r",
									"        );\r",
									"    }\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/allAdmin",
							"host": [
								"{{host}}"
							],
							"path": [
								"allAdmin"
							]
						}
					},
					"response": [
						{
							"name": "Get All Admin",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/allAdmin",
									"host": [
										"{{host}}"
									],
									"path": [
										"allAdmin"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Werkzeug/3.1.3 Python/3.12.2"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Dec 2024 22:24:49 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "197"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"email\": \"bob.bobberson@mail.com\",\n        \"firstName\": \"Bob\",\n        \"lastName\": \"Bobberson\"\n    },\n    {\n        \"email\": \"bubble.bub@mail.com\",\n        \"firstName\": \"Bubble\",\n        \"lastName\": \"Bub\"\n    }\n]"
						}
					]
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Search Course - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"courseCode\": { \"type\": \"string\" },\r",
									"    \"courseTitle\": { \"type\": \"string\" },\r",
									"    \"courseCredits\": { \"type\": \"number\" },\r",
									"    \"courseDescription\": { \"type\": \"string\" },\r",
									"    \"courseLevel\": {\"type\" : \"number\"}\r",
									"  },\r",
									"  \"required\": [\"courseCode\", \"courseTitle\", \"courseCredits\", \"courseDescription\", \"courseLevel\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"if (pm.response.headers.get('Content-Type') === 'application/json') {\r",
									"\r",
									"    pm.test(\"Course data should have the attributes courseCode, courseTitle, courseCredits, courseDescription and courseLevel with the appropriate values\",\r",
									"        function() {\r",
									"            var jsonData = pm.response.json();\r",
									"            pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"        }\r",
									"    );\r",
									"\r",
									"    pm.test(\"Should respond with the correct status\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/courseSearch/{{courseCode}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"courseSearch",
								"{{courseCode}}"
							]
						}
					},
					"response": [
						{
							"name": "Search Course - Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/courseSearch/{{courseCode}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"courseSearch",
										"{{courseCode}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Werkzeug/3.1.3 Python/3.12.2"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Dec 2024 22:25:04 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "202"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"courseCode\": \"COMP3613\",\n    \"courseCredits\": 3,\n    \"courseDescription\": \"All about humans,computers and their interactions haha.\",\n    \"courseLevel\": 3,\n    \"courseTitle\": \"Human-Computer Interaction\"\n}"
						}
					]
				},
				{
					"name": "Search Course - Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"if (pm.response.headers.get('Content-Type') === 'application/json') {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Response has an error\", function () {\r",
									"        pm.expect(jsonData).to.have.property('Error');\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response contains appropriate error message\", () => {\r",
									"        const jsonData = pm.response.json();\r",
									"        pm.expect(jsonData).to.have.property('Error');\r",
									"        pm.expect(jsonData.Error).to.be.a('string');\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response has correct status code\", () => {\r",
									"        pm.expect(pm.response.code).to.eql(404);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/courseSearch/{{invalidCourseCode}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"courseSearch",
								"{{invalidCourseCode}}"
							]
						}
					},
					"response": [
						{
							"name": "Search Course - Invalid",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/courseSearch/{{invalidCourseCode}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"courseSearch",
										"{{invalidCourseCode}}"
									]
								}
							},
							"status": "NOT FOUND",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Werkzeug/3.1.3 Python/3.12.2"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Dec 2024 22:25:17 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "34"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"Error\": \"Course Not Found\"\n}"
						}
					]
				},
				{
					"name": "Search Admin - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"firstName\": { \"type\": \"string\" },\r",
									"        \"lastName\": { \"type\": \"string\" },\r",
									"        \"email\": { \"type\": \"string\", \"format\": \"email\" }\r",
									"    },\r",
									"    \"required\": [\"firstName\", \"lastName\", \"email\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"if (pm.response.headers.get('Content-Type') === 'application/json') {\r",
									"\r",
									"    pm.test(\"Admin data should have the attributes firstName, lastName and email with the appropriate values\",\r",
									"        function() {\r",
									"            var jsonData = pm.response.json();\r",
									"            pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"        }\r",
									"    );\r",
									"\r",
									"    pm.test(\"Should respond with the correct status\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/adminSearch/{{adminEmail}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"adminSearch",
								"{{adminEmail}}"
							]
						}
					},
					"response": [
						{
							"name": "Search Admin - Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/adminSearch/{{adminEmail}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"adminSearch",
										"{{adminEmail}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Werkzeug/3.1.3 Python/3.12.2"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Dec 2024 22:25:26 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "89"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"email\": \"bob.bobberson@mail.com\",\n    \"firstName\": \"Bob\",\n    \"lastName\": \"Bobberson\"\n}"
						}
					]
				},
				{
					"name": "Search Admin - Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"if (pm.response.headers.get('Content-Type') === 'application/json') {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Response has an error\", function () {\r",
									"        pm.expect(jsonData).to.have.property('error');\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response contains appropriate error message\", () => {\r",
									"        pm.expect(jsonData.error).to.be.a('string');\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response has correct status code\", () => {\r",
									"        pm.expect(pm.response.code).to.eql(404);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/adminSearch/{{invalidEmail}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"adminSearch",
								"{{invalidEmail}}"
							]
						}
					},
					"response": [
						{
							"name": "Search Admin - Invalid",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/adminSearch/{{invalidEmail}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"adminSearch",
										"{{invalidEmail}}"
									]
								}
							},
							"status": "NOT FOUND",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Werkzeug/3.1.3 Python/3.12.2"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Dec 2024 22:25:33 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "33"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": \"Admin not found\"\n}"
						}
					]
				},
				{
					"name": "Search Staff - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"first_name\": { \"type\": \"string\" },\r",
									"        \"last_name\": { \"type\": \"string\" },\r",
									"        \"email\": { \"type\": \"string\", \"format\": \"email\" }\r",
									"    },\r",
									"    \"required\": [\"firstName\", \"lastName\", \"email\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"if (pm.response.headers.get('Content-Type') === 'application/json') {\r",
									"\r",
									"    pm.test(\"Staff data should have the attributes first_name, last_name and email with the appropriate values\",\r",
									"        function() {\r",
									"            var jsonData = pm.response.json();\r",
									"            pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"        }\r",
									"    );\r",
									"\r",
									"    pm.test(\"Should respond with the correct status\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/staffSearch/{{staffEmail}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"staffSearch",
								"{{staffEmail}}"
							]
						}
					},
					"response": [
						{
							"name": "Search Staff - Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/staffSearch/{{staffEmail}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"staffSearch",
										"{{staffEmail}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Werkzeug/3.1.3 Python/3.12.2"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Dec 2024 22:25:41 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "87"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"email\": \"rick.rickson@mail.com\",\n    \"firstName\": \"Rick\",\n    \"lastName\": \"Rickson\"\n}"
						}
					]
				},
				{
					"name": "Search Staff - Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"if (pm.response.headers.get('Content-Type') === 'application/json') {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Response has an error\", function () {\r",
									"        pm.expect(jsonData).to.have.property('error');\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response contains appropriate error message\", () => {\r",
									"        pm.expect(jsonData.error).to.be.a('string');\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response has correct status code\", () => {\r",
									"        pm.expect(pm.response.code).to.eql(404);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/staffSearch/{{invalidEmail}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"staffSearch",
								"{{invalidEmail}}"
							]
						}
					},
					"response": [
						{
							"name": "Search Staff - Invalid",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/staffSearch/{{invalidEmail}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"staffSearch",
										"{{invalidEmail}}"
									]
								}
							},
							"status": "NOT FOUND",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Werkzeug/3.1.3 Python/3.12.2"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Dec 2024 22:25:48 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "33"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": \"Staff not found\"\n}"
						}
					]
				},
				{
					"name": "List Staff Courses - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"Staff\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"staffID\": { \"type\": \"number\" },\r",
									"                \"staffName\": { \"type\": \"string\" },\r",
									"                \"staffEmail\": { \"type\": \"string\" }\r",
									"            },\r",
									"            \"required\": [\"staffID\", \"staffName\", \"staffEmail\"]\r",
									"        },\r",
									"        \"Courses\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"courseCode\": { \"type\": \"string\" },\r",
									"                    \"courseTitle\": { \"type\": \"string\" },\r",
									"                    \"semester\": { \"type\": \"string\" },\r",
									"                    \"academicYear\": { \"type\": \"string\" },\r",
									"                    \"startDate\": { \"type\": \"string\", \"format\": \"date\" },\r",
									"                    \"endDate\": { \"type\": \"string\", \"format\": \"date\" }\r",
									"                },\r",
									"                \"required\": [\"courseCode\", \"courseTitle\", \"semester\", \"academicYear\"]\r",
									"            }\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"Staff\", \"Courses\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"if (pm.response.headers.get('Content-Type') === 'application/json') {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Response should match the expected schema\", function() {\r",
									"        pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"    });\r",
									"\r",
									"    pm.test(\"Staff object should have valid details\", function() {\r",
									"        pm.expect(jsonData.Staff).to.have.property(\"staffID\").that.is.a(\"number\");\r",
									"        pm.expect(jsonData.Staff).to.have.property(\"staffName\").that.is.a(\"string\");\r",
									"        pm.expect(jsonData.Staff).to.have.property(\"staffEmail\").that.is.a(\"string\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Courses array should have valid course details\", function() {\r",
									"        pm.expect(jsonData.Courses).to.be.an(\"array\");\r",
									"        jsonData.Courses.forEach(function(course) {\r",
									"            pm.expect(course).to.have.property(\"courseCode\").that.is.a(\"string\");\r",
									"            pm.expect(course).to.have.property(\"courseTitle\").that.is.a(\"string\");\r",
									"            pm.expect(course).to.have.property(\"semester\").that.is.a(\"string\");\r",
									"            pm.expect(course).to.have.property(\"academicYear\").that.is.a(\"string\");\r",
									"        });\r",
									"    });\r",
									"\r",
									"    pm.test(\"Should respond with the correct status\", function() {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/staffCourses/{{staffEmail}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"staffCourses",
								"{{staffEmail}}"
							]
						}
					},
					"response": [
						{
							"name": "List Staff Courses - Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/staffCourses/{{staffEmail}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"staffCourses",
										"{{staffEmail}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Werkzeug/3.1.3 Python/3.12.2"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Dec 2024 22:25:57 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "295"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"Courses\": [\n        {\n            \"academicYear\": \"2024/2025\",\n            \"courseCode\": \"COMP3603\",\n            \"courseTitle\": \"Human-Computer Interaction\",\n            \"semester\": \"Semester 1\"\n        }\n    ],\n    \"Staff\": {\n        \"staffEmail\": \"rick.rickson@mail.com\",\n        \"staffID\": 2,\n        \"staffName\": \"Rick Rickson\"\n    }\n}"
						}
					]
				},
				{
					"name": "List Staff Courses - Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"if (pm.response.headers.get('Content-Type') === 'application/json') {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Response has an error\", function () {\r",
									"        pm.expect(jsonData).to.have.property('error');\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response contains appropriate error message\", () => {\r",
									"        pm.expect(jsonData.error).to.be.a('string');\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response has correct status code\", () => {\r",
									"        pm.expect(pm.response.code).to.eql(404);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/staffCourses/{{invalidEmail}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"staffCourses",
								"{{invalidEmail}}"
							]
						}
					},
					"response": [
						{
							"name": "List Staff Courses - Invalid",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/staffCourses/{{invalidEmail}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"staffCourses",
										"{{invalidEmail}}"
									]
								}
							},
							"status": "NOT FOUND",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Werkzeug/3.1.3 Python/3.12.2"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Dec 2024 22:26:05 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "33"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": \"Staff not found\"\n}"
						}
					]
				},
				{
					"name": "List Course Staff - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"CourseStaff\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"courseStaffID\": { \"type\": \"number\" },\r",
									"                    \"courseOffering\": {\r",
									"                        \"type\": \"object\",\r",
									"                        \"properties\": {\r",
									"                            \"courseCode\": { \"type\": \"string\" },\r",
									"                            \"courseTitle\": { \"type\": [\"string\", \"null\"] },\r",
									"                            \"semester\": { \"type\": [\"string\", \"null\"] },\r",
									"                            \"academicYear\": { \"type\": [\"string\", \"null\"] },\r",
									"                            \"startDate\": { \"type\": [\"string\", \"null\"], \"format\": \"date\" },\r",
									"                            \"endDate\": { \"type\": [\"string\", \"null\"], \"format\": \"date\" }\r",
									"                        },\r",
									"                        \"required\": [\"courseCode\"]\r",
									"                    },\r",
									"                    \"staff\": {\r",
									"                        \"type\": \"object\",\r",
									"                        \"properties\": {\r",
									"                            \"staffID\": { \"type\": \"number\" },\r",
									"                            \"staffName\": { \"type\": [\"string\", \"null\"] },\r",
									"                            \"staffEmail\": { \"type\": [\"string\", \"null\"] }\r",
									"                        },\r",
									"                        \"required\": [\"staffID\"]\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\"courseStaffID\", \"courseOffering\", \"staff\"]\r",
									"            }\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"CourseStaff\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should match the expected schema\", function() {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"CourseStaff should have valid data\", function() {\r",
									"    pm.expect(jsonData.CourseStaff).to.be.an(\"array\");\r",
									"    jsonData.CourseStaff.forEach(function(staff) {\r",
									"        pm.expect(staff).to.have.property(\"courseStaffID\").that.is.a(\"number\");\r",
									"        pm.expect(staff).to.have.property(\"courseOffering\");\r",
									"        pm.expect(staff.courseOffering).to.have.property(\"courseCode\").that.is.a(\"string\");\r",
									"        pm.expect(staff).to.have.property(\"staff\");\r",
									"        pm.expect(staff.staff).to.have.property(\"staffID\").that.is.a(\"number\");\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Should respond with the correct status\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"courseCode\": \"{{newCourseCode}}\",\r\n    \"semesterName\": \"Semester 1\",\r\n    \"academicYear\": \"2024/2025\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/courseStaff",
							"host": [
								"{{host}}"
							],
							"path": [
								"courseStaff"
							]
						}
					},
					"response": [
						{
							"name": "List Course Staff - Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"courseCode\": \"{{newCourseCode}}\",\r\n    \"semesterName\": \"Semester 1\",\r\n    \"academicYear\": \"2024/2025\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/courseStaff",
									"host": [
										"{{host}}"
									],
									"path": [
										"courseStaff"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Werkzeug/3.1.3 Python/3.12.2"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Dec 2024 22:26:18 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "493"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"CourseStaff\": [\n        {\n            \"courseOffering\": {\n                \"academicYear\": \"2024/2025\",\n                \"courseCode\": \"COMP3603\",\n                \"courseTitle\": \"Human-Computer Interaction\",\n                \"endDate\": \"Fri, 20 Dec 2024 00:00:00 GMT\",\n                \"semester\": \"Semester 1\",\n                \"startDate\": \"Sun, 25 Aug 2024 00:00:00 GMT\"\n            },\n            \"courseStaffID\": 1,\n            \"staff\": {\n                \"staffEmail\": \"rick.rickson@mail.com\",\n                \"staffID\": 2,\n                \"staffName\": \"Rick Rickson\"\n            }\n        }\n    ]\n}"
						}
					]
				}
			]
		},
		{
			"name": "Staff",
			"item": [
				{
					"name": "Create Assessment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return a successful response with the message and assessment ID\", function () {\r",
									"\r",
									"    pm.expect(pm.response.code).to.eql(201);\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('message', 'Assessment Created Successfully');\r",
									"    pm.expect(jsonData).to.have.property('CourseAssessment');\r",
									"\r",
									"    if (jsonData.CourseAssessment && jsonData.CourseAssessment.assessmentID) {\r",
									"        pm.environment.set(\"assessmentID\", jsonData.CourseAssessment.assessmentID);\r",
									"    } else {\r",
									"        pm.expect.fail(\"Assessment ID was not returned in the response.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type should be application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"assessmentTitle\": \"CourseWork Exam\",\r\n\t\"assessmentType\": \"COURSEWORK\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/createAssessment",
							"host": [
								"{{host}}"
							],
							"path": [
								"createAssessment"
							]
						}
					},
					"response": [
						{
							"name": "Create Assessment",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"assessmentTitle\": \"CourseWork Exam\",\r\n\t\"assessmentType\": \"COURSEWORK\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/createAssessment",
									"host": [
										"{{host}}"
									],
									"path": [
										"createAssessment"
									]
								}
							},
							"status": "CREATED",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Werkzeug/3.1.3 Python/3.12.2"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Dec 2024 22:26:33 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "180"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"CourseAssessment\": {\n        \"assessmentID\": 2,\n        \"assessmentTitle\": \"CourseWork Exam\",\n        \"assessmentType\": \"COURSEWORK\"\n    },\n    \"message\": \"Assessment Created Successfully\"\n}"
						}
					]
				},
				{
					"name": "Degree Programme",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"if (pm.response.headers.get('Content-Type') === 'application/json') {\r",
									"\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Should have the correct status code\", () => {\r",
									"        pm.expect(pm.response.code).to.eql(400);\r",
									"    });\r",
									"\r",
									"    if (pm.response.code === 400) {\r",
									"        pm.test(\"Response contains an error message\", () => {\r",
									"            pm.expect(jsonData).to.have.property('message');\r",
									"            pm.expect(jsonData.message).to.include('Clashing Course(s)');\r",
									"        });\r",
									"\r",
									"        pm.test(\"Error message should contain clash details\", () => {\r",
									"            pm.expect(jsonData.message).to.include('Degree Clash Detected');\r",
									"            pm.expect(jsonData.message).to.include('CourseCode');\r",
									"            pm.expect(jsonData.message).to.include('AssessmentTitle');\r",
									"            pm.expect(jsonData.message).to.include('AssessmentType');\r",
									"            pm.expect(jsonData.message).to.include('Start Time');\r",
									"            pm.expect(jsonData.message).to.include('End Time');\r",
									"        });\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"courseCode\": \"{{newCourseCode}}\",\r\n    \"assessmentID\": {{assessmentID}},\r\n    \"startDate\": \"2024-11-04\", \r\n    \"endDate\": \"2024-11-04\",\r\n    \"startTime\": \"9:00\",\r\n    \"endTime\": \"10:00\",\r\n    \"clashRule\": \"degree\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/scheduleAssessment",
							"host": [
								"{{host}}"
							],
							"path": [
								"scheduleAssessment"
							]
						}
					},
					"response": [
						{
							"name": "Degree Programme",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"courseCode\": \"{{newCourseCode}}\",\r\n    \"assessmentID\": {{assessmentID}},\r\n    \"startDate\": \"2024-11-04\", \r\n    \"endDate\": \"2024-11-04\",\r\n    \"startTime\": \"9:00\",\r\n    \"endTime\": \"10:00\",\r\n    \"clashRule\": \"degree\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/scheduleAssessment",
									"host": [
										"{{host}}"
									],
									"path": [
										"scheduleAssessment"
									]
								}
							},
							"status": "BAD REQUEST",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Werkzeug/3.1.3 Python/3.12.2"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Dec 2024 22:26:59 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "462"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"\\nDegree Clash Detected!\\n==================================================\\nClashing Course(s):\\n  - CourseCode: COMP3613\\n  - Degree Programme: Bachelors of Science Computer Science Honours\\n  - AssessmentTitle: Software Engineering II- CourseWork Exam\\n  - AssessmentType: AssessmentTypes.COURSEWORK\\n  - Start Time: 2024-11-04 09:00\\n  - End Time: 2024-11-04 10:00\\n==================================================\",\n    \"status\": \"error\"\n}"
						}
					]
				},
				{
					"name": "Student Overlap",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"if (pm.response.headers.get('Content-Type') === 'application/json') {\r",
									"\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Should have the correct status code\", () => {\r",
									"        pm.expect(pm.response.code).to.eql(400);\r",
									"    });\r",
									"\r",
									"    if (pm.response.code === 400) {\r",
									"        pm.test(\"Response contains an error message\", () => {\r",
									"            pm.expect(jsonData).to.have.property('message');\r",
									"            pm.expect(jsonData.message).to.include('Assessment Clash Found Due To Overlapping Student Enrollment');\r",
									"        });\r",
									"\r",
									"        pm.test(\"Error message should contain overlapping course details\", () => {\r",
									"            pm.expect(jsonData.message).to.include('Overlapping Course(s)');\r",
									"            pm.expect(jsonData.message).to.include('Total Students');\r",
									"            pm.expect(jsonData.message).to.include('Overlap');\r",
									"        });\r",
									"    }\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"courseCode\": \"{{newCourseCode}}\",\r\n    \"assessmentID\": {{assessmentID}},\r\n    \"startDate\": \"2024-11-04\", \r\n    \"endDate\": \"2024-11-04\",\r\n    \"startTime\": \"9:00\",\r\n    \"endTime\": \"10:00\",\r\n    \"clashRule\": \"student_overlap\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/scheduleAssessment",
							"host": [
								"{{host}}"
							],
							"path": [
								"scheduleAssessment"
							]
						}
					},
					"response": [
						{
							"name": "Student Overlap",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"courseCode\": \"{{newCourseCode}}\",\r\n    \"assessmentID\": {{assessmentID}},\r\n    \"startDate\": \"2024-11-04\", \r\n    \"endDate\": \"2024-11-04\",\r\n    \"startTime\": \"9:00\",\r\n    \"endTime\": \"10:00\",\r\n    \"clashRule\": \"student_overlap\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/scheduleAssessment",
									"host": [
										"{{host}}"
									],
									"path": [
										"scheduleAssessment"
									]
								}
							},
							"status": "BAD REQUEST",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Werkzeug/3.1.3 Python/3.12.2"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Dec 2024 22:27:15 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "337"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"\\nAssessment Clash Found Due To Overlapping Student Enrollment\\n==================================================\\nOverlapping Course(s):\\n- Course 1: COMP3603 (Total Students: 100)\\n- Course 2: COMP3613 (Total Students: 125, Overlap: 125.00%)\\n==================================================\",\n    \"status\": \"error\"\n}"
						}
					]
				},
				{
					"name": "Assessment Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"if (pm.response.headers.get('Content-Type') === 'application/json') {\r",
									"\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Should have the correct status code\", () => {\r",
									"        pm.expect(pm.response.code).to.eql(400);\r",
									"    });\r",
									"\r",
									"    if (pm.response.code === 400) {\r",
									"        pm.test(\"Response contains an error message\", () => {\r",
									"            pm.expect(jsonData).to.have.property('message');\r",
									"            pm.expect(jsonData.message).to.include('Assessment Clash Found Due To Insufficient Preparation Time');\r",
									"        });\r",
									"\r",
									"        pm.test(\"Error message should contain conflicting assessments details\", () => {\r",
									"            pm.expect(jsonData.message).to.include('Conflicting Assessments');\r",
									"            pm.expect(jsonData.message).to.include('Course:');\r",
									"            pm.expect(jsonData.message).to.include('Assessment Type:');\r",
									"            pm.expect(jsonData.message).to.include('Start Date:');\r",
									"            pm.expect(jsonData.message).to.include('End Date:');\r",
									"        });\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"courseCode\": \"{{newCourseCode}}\",\r\n    \"assessmentID\": {{assessmentID}},\r\n    \"startDate\": \"2024-11-04\", \r\n    \"endDate\": \"2024-11-04\",\r\n    \"startTime\": \"9:00\",\r\n    \"endTime\": \"10:00\",\r\n    \"clashRule\": \"assessment_type\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/scheduleAssessment",
							"host": [
								"{{host}}"
							],
							"path": [
								"scheduleAssessment"
							]
						}
					},
					"response": [
						{
							"name": "Assessment Type",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"courseCode\": \"{{newCourseCode}}\",\r\n    \"assessmentID\": {{assessmentID}},\r\n    \"startDate\": \"2024-11-04\", \r\n    \"endDate\": \"2024-11-04\",\r\n    \"startTime\": \"9:00\",\r\n    \"endTime\": \"10:00\",\r\n    \"clashRule\": \"assessment_type\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/scheduleAssessment",
									"host": [
										"{{host}}"
									],
									"path": [
										"scheduleAssessment"
									]
								}
							},
							"status": "BAD REQUEST",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Werkzeug/3.1.3 Python/3.12.2"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Dec 2024 22:27:25 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "335"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"\\nAssessment Clash Found Due To Insufficient Preparation Time\\n==================================================\\nConflicting Assessments:\\n- Course: COMP3613\\n  Assessment Type: COURSEWORK\\n  Start Date: 2024-11-04\\n  End Date: 2024-11-04\\n--------------------------------------------------\\n\",\n    \"status\": \"error\"\n}"
						}
					]
				},
				{
					"name": "Schedule Assessment - No Clash",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"if (pm.response.headers.get('Content-Type') === 'application/json') {\r",
									"\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Should have the correct status code\", () => {\r",
									"        pm.expect(pm.response.code).to.eql(201);\r",
									"    });\r",
									"\r",
									"    if (pm.response.code === 201) {\r",
									"        pm.test(\"Response contains success message and courseAssessment\", () => {\r",
									"            pm.expect(jsonData).to.have.property('message');\r",
									"            pm.expect(jsonData).to.have.property('courseAssessment');\r",
									"            pm.expect(jsonData.courseAssessment).to.have.all.keys(\r",
									"                'courseCode',\r",
									"                'assessmentID',\r",
									"                'courseAssessmentID',\r",
									"                'startDate',\r",
									"                'endDate',\r",
									"                'startTime',\r",
									"                'endTime',\r",
									"                'clashRule'\r",
									"            );\r",
									"            pm.environment.set(\"courseAssessmentID\", jsonData.courseAssessment.courseAssessmentID);\r",
									"        });\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"courseCode\": \"{{newCourseCode}}\",\r\n    \"assessmentID\": {{assessmentID}},\r\n    \"startDate\": \"2024-11-04\", \r\n    \"endDate\": \"2024-11-04\",\r\n    \"startTime\": \"11:00\",\r\n    \"endTime\": \"13:00\",\r\n    \"clashRule\": \"degree\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/scheduleAssessment",
							"host": [
								"{{host}}"
							],
							"path": [
								"scheduleAssessment"
							]
						}
					},
					"response": [
						{
							"name": "Schedule Assessment - No Clash",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"courseCode\": \"{{newCourseCode}}\",\r\n    \"assessmentID\": {{assessmentID}},\r\n    \"startDate\": \"2024-11-04\", \r\n    \"endDate\": \"2024-11-04\",\r\n    \"startTime\": \"11:00\",\r\n    \"endTime\": \"13:00\",\r\n    \"clashRule\": \"degree\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/scheduleAssessment",
									"host": [
										"{{host}}"
									],
									"path": [
										"scheduleAssessment"
									]
								}
							},
							"status": "CREATED",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Werkzeug/3.1.3 Python/3.12.2"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Dec 2024 22:27:40 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "312"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"courseAssessment\": {\n        \"assessmentID\": 2,\n        \"clashRule\": \"DEGREE\",\n        \"courseAssessmentID\": 2,\n        \"courseCode\": \"COMP3603\",\n        \"endDate\": \"2024-11-04\",\n        \"endTime\": \"13:00\",\n        \"startDate\": \"2024-11-04\",\n        \"startTime\": \"11:00\"\n    },\n    \"message\": \"Course And Assessment Successfully Associated\"\n}"
						}
					]
				},
				{
					"name": "Search Course Assessment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"if (pm.response.headers.get('Content-Type') === 'application/json') {\r",
									"\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Should return a successful status code\", function() {\r",
									"        pm.expect(pm.response.code).to.eql(200);\r",
									"    });\r",
									"\r",
									"    if (pm.response.code === 200) {\r",
									"        pm.test(\"Response contains CourseAssessment details\", function() {\r",
									"            pm.expect(jsonData).to.have.property('CourseAssessment');\r",
									"            pm.expect(jsonData.CourseAssessment).to.have.all.keys(\r",
									"                'assessmentID',\r",
									"                'clashRule',\r",
									"                'courseAssessmentID',\r",
									"                'courseCode',\r",
									"                'endDate',\r",
									"                'endTime',\r",
									"                'startDate',\r",
									"                'startTime',\r",
									"                \r",
									"            );\r",
									"        });\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/searchCourseAssessment/{{courseAssessmentID}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"searchCourseAssessment",
								"{{courseAssessmentID}}"
							]
						}
					},
					"response": [
						{
							"name": "Search Course Assessment",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/searchCourseAssessment/{{courseAssessmentID}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"searchCourseAssessment",
										"{{courseAssessmentID}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Werkzeug/3.1.3 Python/3.12.2"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Dec 2024 22:27:49 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "250"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"CourseAssessment\": {\n        \"assessmentID\": 2,\n        \"clashRule\": \"DEGREE\",\n        \"courseAssessmentID\": 2,\n        \"courseCode\": \"COMP3603\",\n        \"endDate\": \"2024-11-04\",\n        \"endTime\": \"13:00\",\n        \"startDate\": \"2024-11-04\",\n        \"startTime\": \"11:00\"\n    }\n}"
						}
					]
				},
				{
					"name": "View Course Schedule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"if (pm.response.headers.get('Content-Type') === 'application/json') {\r",
									"\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Should return a successful status code\", function() {\r",
									"        pm.expect(pm.response.code).to.eql(200);\r",
									"    });\r",
									"\r",
									"    if (pm.response.code === 200) {\r",
									"        pm.test(\"Response contains course assessments\", function() {\r",
									"            pm.expect(jsonData).to.have.property('CourseAssessments');\r",
									"            pm.expect(jsonData.CourseAssessments).to.be.an('array');\r",
									"            pm.expect(jsonData.CourseAssessments.length).to.be.greaterThan(0);\r",
									"        });\r",
									"    }\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"startDate\": \"2024-11-01\", \r\n    \"endDate\": \"2024-11-30\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/viewCourseSchedule/{{newCourseCode}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"viewCourseSchedule",
								"{{newCourseCode}}"
							]
						}
					},
					"response": [
						{
							"name": "View Course Schedule",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"startDate\": \"2024-11-01\", \r\n    \"endDate\": \"2024-11-30\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/viewCourseSchedule/{{newCourseCode}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"viewCourseSchedule",
										"{{newCourseCode}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Werkzeug/3.1.3 Python/3.12.2"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Dec 2024 22:27:58 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "279"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"CourseAssessments\": [\n        {\n            \"assessmentID\": 2,\n            \"clashRule\": \"DEGREE\",\n            \"courseAssessmentID\": 2,\n            \"courseCode\": \"COMP3603\",\n            \"endDate\": \"2024-11-04\",\n            \"endTime\": \"13:00\",\n            \"startDate\": \"2024-11-04\",\n            \"startTime\": \"11:00\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Reschedule Course Assessment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"if (pm.response.headers.get('Content-Type') === 'application/json') {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Should have the correct status code\", () => {\r",
									"        pm.expect(pm.response.code).to.eql(200);\r",
									"    });\r",
									"\r",
									"    if (pm.response.code === 200) {\r",
									"        pm.test(\"Response contains success message and rescheduled courseAssessment\", () => {\r",
									"\r",
									"            pm.test(\"CourseAssessment exists with all expected keys\", () => {\r",
									"                pm.expect(jsonData).to.have.property('CourseAssessment');\r",
									"                pm.expect(jsonData.CourseAssessment).to.have.all.keys(\r",
									"                    'assessmentID',\r",
									"                    'clashRule',\r",
									"                    'courseAssessmentID',\r",
									"                    'courseCode',\r",
									"                    'endDate',\r",
									"                    'endTime',\r",
									"                    'startDate',\r",
									"                    'startTime'\r",
									"                );\r",
									"            });\r",
									"        });\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"startDate\": \"2024-11-11\", \r\n    \"endDate\": \"2024-11-11\",\r\n    \"startTime\": \"11:00\",\r\n    \"endTime\": \"13:00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rescheduleAssessment/{{courseAssessmentID}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"rescheduleAssessment",
								"{{courseAssessmentID}}"
							]
						}
					},
					"response": [
						{
							"name": "Reschedule Course Assessment",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"startDate\": \"2024-11-11\", \r\n    \"endDate\": \"2024-11-11\",\r\n    \"startTime\": \"11:00\",\r\n    \"endTime\": \"13:00\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/rescheduleAssessment/{{courseAssessmentID}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"rescheduleAssessment",
										"{{courseAssessmentID}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Werkzeug/3.1.3 Python/3.12.2"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Dec 2024 22:28:10 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "308"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"CourseAssessment\": {\n        \"assessmentID\": 2,\n        \"clashRule\": \"DEGREE\",\n        \"courseAssessmentID\": 2,\n        \"courseCode\": \"COMP3603\",\n        \"endDate\": \"2024-11-11\",\n        \"endTime\": \"13:00\",\n        \"startDate\": \"2024-11-11\",\n        \"startTime\": \"11:00\"\n    },\n    \"Message\": \"CourseAssessment Successfully Rescheduled\"\n}"
						}
					]
				},
				{
					"name": "Delete Course Assessment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Should have the correct status code\", () => {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains success message\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('Message');\r",
									"    pm.expect(jsonData.Message).to.eql('CourseAssessment And Associated Assessment Deleted');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/deleteAssessment/{{courseAssessmentID}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"deleteAssessment",
								"{{courseAssessmentID}}"
							]
						}
					},
					"response": [
						{
							"name": "Delete Course Assessment",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/deleteAssessment/{{courseAssessmentID}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"deleteAssessment",
										"{{courseAssessmentID}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Werkzeug/3.1.3 Python/3.12.2"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Dec 2024 22:28:25 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "70"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"Message\": \"CourseAssessment And Associated Assessment Deleted\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Admin - Deletions",
			"item": [
				{
					"name": "Remove Course From Programme",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return a successful response of Deletion with message\", function() {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('message', 'Course successfully removed from the programme');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type should be application/json\", function(){\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"courseCode\": \"{{newCourseCode}}\",\r\n    \"programmeID\": \"{{programmeID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/removeProgrammeCourse",
							"host": [
								"{{host}}"
							],
							"path": [
								"removeProgrammeCourse"
							]
						}
					},
					"response": [
						{
							"name": "Remove Course From Programme",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"courseCode\": \"{{newCourseCode}}\",\r\n    \"programmeID\": \"{{programmeID}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/removeProgrammeCourse",
									"host": [
										"{{host}}"
									],
									"path": [
										"removeProgrammeCourse"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Werkzeug/3.1.3 Python/3.12.2"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Dec 2024 22:32:10 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "66"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Course successfully removed from the programme\"\n}"
						}
					]
				},
				{
					"name": "Remove Course Offering - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"if (pm.response.headers.get('Content-Type') === 'application/json') {\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Should return a successful status code\", function() {\r",
									"        pm.expect(pm.response.code).to.eql(200);\r",
									"    });\r",
									"\r",
									"    if (pm.response.code === 201) {\r",
									"        pm.test(\"Response contains success message indicating course offering removal\", function() {\r",
									"            pm.expect(jsonData).to.have.property('message');\r",
									"            pm.expect(jsonData.message).to.match(/.*Course Offering Removed Successfully.*/);\r",
									"        });\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"courseCode\": \"{{courseCode}}\",\r\n    \"semesterID\": \"{{semesterID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/removeCourseOffering",
							"host": [
								"{{host}}"
							],
							"path": [
								"removeCourseOffering"
							]
						}
					},
					"response": [
						{
							"name": "Remove Course Offering - Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"courseCode\": \"{{courseCode}}\",\r\n    \"semesterID\": \"{{semesterID}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/removeCourseOffering",
									"host": [
										"{{host}}"
									],
									"path": [
										"removeCourseOffering"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Werkzeug/3.1.3 Python/3.12.2"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Dec 2024 22:34:13 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "56"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Course Offering Removed Successfully\"\n}"
						}
					]
				},
				{
					"name": "Remove Course Staff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return a successful response when staff is removed from the course\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('Message', 'Staff Successfully Removed From The Course');\r",
									"    pm.expect(jsonData).to.not.have.property('Error');\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"staffEmail\": \"{{staffEmail}}\",\r\n    \"semesterName\": \"Semester 1\",\r\n    \"academicYear\": \"2024/2025\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/removeCourseStaff/{{newCourseCode}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"removeCourseStaff",
								"{{newCourseCode}}"
							]
						}
					},
					"response": [
						{
							"name": "Remove Course Staff",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"staffEmail\": \"{{staffEmail}}\",\r\n    \"semesterName\": \"Semester 1\",\r\n    \"academicYear\": \"2024/2025\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/removeCourseStaff/{{newCourseCode}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"removeCourseStaff",
										"{{newCourseCode}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Werkzeug/3.1.3 Python/3.12.2"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Dec 2024 22:32:42 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "62"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"Message\": \"Staff Successfully Removed From The Course\"\n}"
						}
					]
				},
				{
					"name": "Remove Staff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"if (pm.response.headers.get('Content-Type') === 'application/json') {\r",
									"\r",
									"    if (pm.response.code === 200) {\r",
									"        pm.test(\"Should return a success message\",\r",
									"            function() {\r",
									"                var jsonData = pm.response.json();\r",
									"                pm.expect(jsonData).to.have.property('message');\r",
									"                pm.expect(jsonData.message).to.equal('Staff member deleted successfully');\r",
									"            }\r",
									"        );\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/removeStaff/{{newStaffEmail}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"removeStaff",
								"{{newStaffEmail}}"
							]
						}
					},
					"response": [
						{
							"name": "Remove Staff",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/removeStaff/{{newStaffEmail}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"removeStaff",
										"{{newStaffEmail}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Werkzeug/3.1.3 Python/3.12.2"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Dec 2024 22:33:01 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "53"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Staff member deleted successfully\"\n}"
						}
					]
				},
				{
					"name": "Remove Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"if (pm.response.headers.get('Content-Type') === 'application/json') {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Should have the correct status code\", function() {\r",
									"        pm.expect(pm.response.code).to.eql(200);\r",
									"    });\r",
									"\r",
									"    if (pm.response.code === 200) {\r",
									"        pm.test(\"Should return a success message when admin is deleted\", function() {\r",
									"            pm.expect(jsonData).to.have.property('message', 'Admin deleted successfully');\r",
									"        });\r",
									"    } else if (pm.response.code === 404) {\r",
									"        pm.test(\"Should return 'No Admin Found.' when the admin does not exist\", function() {\r",
									"            pm.expect(jsonData).to.have.property('error', 'No Admin Found.');\r",
									"        });\r",
									"    } else if (pm.response.code === 400) {\r",
									"        pm.test(\"Should return error message when there is an issue deleting the admin\", function() {\r",
									"            pm.expect(jsonData).to.have.property('error');\r",
									"        });\r",
									"    } else if (pm.response.code === 500) {\r",
									"        pm.test(\"Should return 'An unknown error occurred' for unexpected errors\", function() {\r",
									"            pm.expect(jsonData).to.have.property('error', 'An unknown error occurred');\r",
									"        });\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/removeAdmin/{{adminEmail}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"removeAdmin",
								"{{adminEmail}}"
							]
						}
					},
					"response": [
						{
							"name": "Remove Admin",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/removeAdmin/{{adminEmail}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"removeAdmin",
										"{{adminEmail}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Werkzeug/3.1.3 Python/3.12.2"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Dec 2024 22:33:13 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "46"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Admin deleted successfully\"\n}"
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}